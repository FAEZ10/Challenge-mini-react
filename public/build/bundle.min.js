(function () {
  'use strict';

  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return e;
    };
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function (t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function (t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw new Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(typeof e + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function (e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function () {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function (e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw new Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function (t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function (t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      catch: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var CLASS = 'class';
  var ROOT_WRAPPER = 'root';

  var HOST_WRAPPER = 'host';
  var INSERT = 1;
  var DELETE = 2;
  var UPDATE = 3;
  var THREAD_TIME = 1;

  var instantiate = function instantiate(fiber) {
    var instance = new fiber.type(fiber.props);
    instance.__fiber = fiber;
    return instance;
  };
  var findRoot = function findRoot(fiber) {
    var node = fiber;
    while (node && node.parent) {
      node = node.parent;
    }
    return node;
  };

  var childrenReconcile = function childrenReconcile(wipTree, newChildElements) {
    var elements = [].concat(newChildElements);
    var index = 0;
    var oldFiber = wipTree.alternate ? wipTree.alternate.child : null;
    var newFiber = null;
    while (index < elements.length || oldFiber != null) {
      var prevFiber = newFiber;
      var element = index < elements.length && elements[index];
      var sameType = oldFiber && element && element.type == oldFiber.type;
      if (sameType) {
        newFiber = {
          type: oldFiber.type,
          tag: oldFiber.tag,
          stateNode: oldFiber.stateNode,
          props: element.props,
          parent: wipTree,
          alternate: oldFiber,
          partialState: oldFiber.partialState,
          effectTag: UPDATE
        };
      }
      if (element && !sameType) {
        newFiber = {
          type: element.type,
          tag: typeof element.type === 'string' ? HOST_WRAPPER : CLASS,
          props: element.props,
          parent: wipTree,
          effectTag: INSERT
        };
      }
      if (oldFiber && !sameType) {
        oldFiber.effectTag = DELETE;
        wipTree.effects = wipTree.effects || [];
        wipTree.effects.push(oldFiber);
      }
      if (oldFiber) {
        oldFiber = oldFiber.sibling;
      }
      if (index == 0) {
        wipTree.child = newFiber;
      } else if (prevFiber && element) {
        prevFiber.sibling = newFiber;
      }
      index++;
    }
  };
  var childrenClone = function childrenClone(parentFiber) {
    var oldFiber = parentFiber.alternate;
    if (!oldFiber.child) {
      return;
    }
    var oldChild = oldFiber.child;
    var prevChild = null;
    while (oldChild) {
      var newChild = {
        type: oldChild.type,
        tag: oldChild.tag,
        stateNode: oldChild.stateNode,
        props: oldChild.props,
        partialState: oldChild.partialState,
        alternate: oldChild,
        parent: parentFiber
      };
      if (prevChild) {
        prevChild.sibling = newChild;
      } else {
        parentFiber.child = newChild;
      }
      prevChild = newChild;
      oldChild = oldChild.sibling;
    }
  };
  var removeFiber = function removeFiber(fiber, domParent) {
    var node = fiber;

    // eslint-disable-next-line no-constant-condition
    while (true) {
      if (node.tag == CLASS) {
        node = node.child;
        continue;
      }
      domParent.removeChild(node.stateNode);
      while (node != fiber && !node.sibling) {
        node = node.parent;
      }
      if (node == fiber) {
        return;
      }
      node = node.sibling;
    }
  };

  var _renderer = null;
  var _queue = [];
  var _nextMessage = null;
  var _pending = null;
  var setRenderer = function setRenderer(renderer) {
    return _renderer = renderer;
  };
  var addMessage = function addMessage(message) {
    _queue.push(message);
    requestIdleCallback(initConsumer);
  };
  var initConsumer = function initConsumer(time) {
    consumeQueue(time);
    if (_nextMessage || _queue.length > 0) {
      requestIdleCallback(initConsumer);
    }
  };
  var consumeQueue = function consumeQueue(time) {
    !_nextMessage && setNextMessage();
    while (_nextMessage && time.timeRemaining() > THREAD_TIME) {
      _nextMessage = consumeMessage(_nextMessage);
    }
    if (_pending) {
      pushAll(_pending);
    }
  };
  var setNextMessage = function setNextMessage() {
    var changes = _queue.shift();
    if (!changes) {
      return;
    }
    var instance = changes.instance,
      partialState = changes.partialState,
      dom = changes.dom,
      newProps = changes.newProps,
      from = changes.from;
    if (partialState) {
      instance.__fiber.partialState = partialState;
    }
    var root = from == ROOT_WRAPPER ? dom._rootContainerFiber : findRoot(instance.__fiber);
    _nextMessage = {
      tag: ROOT_WRAPPER,
      stateNode: dom || root.stateNode,
      props: newProps || root.props,
      alternate: root
    };
  };
  var consumeMessage = function consumeMessage(wipTree) {
    if (wipTree.tag == CLASS) {
      var instance = wipTree.stateNode;
      var isNewInstance = !instance;
      if (isNewInstance) {
        instance = wipTree.stateNode = instantiate(wipTree);
        instance.props = wipTree.props;
        instance.state = Object.assign({}, instance.state, wipTree.partialState);
        wipTree.partialState = null;
        var newChildElements = instance.render();
        childrenReconcile(wipTree, newChildElements);
        instance.componentDidMount();
      } else {
        var propsChanged = wipTree.props != instance.props;
        var stateChanged = wipTree.partialState;
        if (propsChanged || stateChanged) {
          var prevProps = instance.props;
          var prevState = instance.state;
          instance.props = wipTree.props;
          instance.state = Object.assign({}, instance.state, wipTree.partialState);
          wipTree.partialState = null;
          var _newChildElements = instance.render();
          childrenReconcile(wipTree, _newChildElements);
          instance.componentDidUpdate(prevProps, prevState);
          if (wipTree.alternate && wipTree.alternate.callback) {
            wipTree.alternate.callback();
          }
        } else {
          childrenClone(wipTree);
        }
      }
    } else {
      if (!wipTree.stateNode) {
        wipTree.stateNode = _renderer.createElement(wipTree);
      }
      var _newChildElements2 = wipTree.props.children;
      childrenReconcile(wipTree, _newChildElements2);
    }
    if (wipTree.child) {
      return wipTree.child;
    }
    var uow = wipTree;
    while (uow) {
      threadDone(uow);
      if (uow.sibling) {
        return uow.sibling;
      }
      uow = uow.parent;
    }
  };
  var threadDone = function threadDone(fiber) {
    if (fiber.tag == CLASS) {
      fiber.stateNode.__fiber = fiber;
    }
    if (fiber.parent) {
      var childEffects = fiber.effects || [];
      var thisEffect = fiber.effectTag != null ? [fiber] : [];
      var parentEffects = fiber.parent.effects || [];
      fiber.parent.effects = parentEffects.concat(childEffects, thisEffect);
    } else {
      _pending = fiber;
    }
  };
  var pushAll = function pushAll(fiber) {
    fiber.effects.forEach(function (f) {
      pushOne(f);
    });
    fiber.stateNode._rootContainerFiber = fiber;
    _nextMessage = null;
    _pending = null;
  };
  var pushOne = function pushOne(fiber) {
    if (fiber.tag == ROOT_WRAPPER) {
      return;
    }
    var domParentFiber = fiber.parent;
    while (domParentFiber.tag == CLASS) {
      domParentFiber = domParentFiber.parent;
    }
    var domParent = domParentFiber.stateNode;
    if (fiber.effectTag == INSERT && fiber.tag == HOST_WRAPPER) {
      domParent.appendChild(fiber.stateNode);
    } else if (fiber.effectTag == UPDATE) {
      _renderer.propsUpdate(fiber.stateNode, fiber.alternate.props, fiber.props);
    } else if (fiber.effectTag == DELETE) {
      removeFiber(fiber, domParent);
    }
  };

  var Component = /*#__PURE__*/function () {
    function Component(props) {
      _classCallCheck(this, Component);
      this.props = props || {};
      this.state = this.state || {};
      this.componentDidMount = this.componentDidMount || function () {};
      this.componentDidUpdate = this.componentDidUpdate || function () {};
      this.componentWillUnmount = this.componentWillUnmount || function () {};
    }
    _createClass(Component, [{
      key: "setState",
      value: function setState(state, callback) {
        var newState = typeof state === 'function' ? state(this.state) : state;
        var message = {
          from: CLASS,
          instance: this,
          partialState: newState,
          callback: callback
        };
        addMessage(message);
      }
    }]);
    return Component;
  }();

  var _excluded$2 = ["tagName", "props", "componentClass"];
  var CreateElement = (function (_ref) {
    var tagName = _ref.tagName,
      _ref$props = _ref.props,
      props = _ref$props === void 0 ? {} : _ref$props,
      componentClass = _ref.componentClass,
      rest = _objectWithoutProperties(_ref, _excluded$2);
    var type = tagName ? tagName : componentClass;
    Object.assign(props, rest);
    return {
      type: type,
      props: props
    };
  });

  var MiniReact = {
    Component: Component,
    CreateElement: CreateElement
  };

  var inserted = function inserted(prev, next) {
    return function (key) {
      return prev[key] !== next[key];
    };
  };
  var deleted = function deleted(prev, next) {
    return function (key) {
      return !(key in next);
    };
  };
  var event = function event(name) {
    return name.startsWith('on');
  };
  var attribute = function attribute(name) {
    return !event(name) && name != 'children' && name != 'style';
  };

  var TEXT_ELEMENT = 'TEXT ELEMENT';

  var MiniReactDOM = {
    render: function render(element, container) {
      setRenderer(MiniReactDOM);
      var message = {
        from: ROOT_WRAPPER,
        dom: container,
        newProps: {
          children: element
        }
      };
      addMessage(message);
    },
    createElement: function createElement(el) {
      var text = el.type === TEXT_ELEMENT;
      var dom = text ? document.createTextNode('') : document.createElement(el.type);
      MiniReactDOM.propsUpdate(dom, [], el.props);
      return dom;
    },
    propsUpdate: function propsUpdate(dom, previous, next) {
      previous && Object.keys(previous).filter(attribute).filter(deleted(previous, next)).forEach(function (name) {
        dom[name] = null;
      });
      previous && Object.keys(previous).filter(event).filter(function (key) {
        return !(key in next) || inserted(previous, next)(key);
      }).forEach(function (name) {
        var eventType = name.toLowerCase().substring(2);
        !dom.props && dom.removeEventListener(eventType, previous[name]);
      });
      next && Object.keys(next).filter(attribute).filter(inserted(previous, next)).forEach(function (name) {
        dom[name] = next[name];
      });
      previous && (previous.style = previous.style || {});
      next && (next.style = next.style || {});
      next && Object.keys(next.style).filter(inserted(previous.style, next.style)).forEach(function (key) {
        dom.style[key] = next.style[key];
      });
      previous && next && Object.keys(previous.style).filter(deleted(previous.style, next.style)).forEach(function (key) {
        dom.style[key] = '';
      });
      previous && next && Object.keys(next).filter(event).filter(inserted(previous, next)).forEach(function (name) {
        var eventType = name.toLowerCase().substring(2);
        !dom.props && dom.addEventListener(eventType, next[name]);
      });
    }
  };

  var BrowserRouter = /*#__PURE__*/function (_Component) {
    _inherits(BrowserRouter, _Component);
    var _super = _createSuper(BrowserRouter);
    function BrowserRouter(props) {
      var _this;
      _classCallCheck(this, BrowserRouter);
      _this = _super.call(this, props);
      _this.state = {
        currentPath: window.location.pathname,
        componentInstances: {}
      };
      _this.handleUrlChange = _this.handleUrlChange.bind(_assertThisInitialized(_this));
      window.addEventListener('popstate', _this.handleUrlChange);
      _this.initializeComponentInstances(props.routes);
      return _this;
    }
    _createClass(BrowserRouter, [{
      key: "initializeComponentInstances",
      value: function initializeComponentInstances(routes) {
        var _this2 = this;
        routes.forEach(function (route) {
          if (!_this2.state.componentInstances[route.path]) {
            var instance = new route.component();
            instance.componentDidMount();
            _this2.state.componentInstances[route.path] = instance;
          }
        });
      }
    }, {
      key: "handleUrlChange",
      value: function handleUrlChange() {
        var newPath = window.location.pathname;
        var matchingRoute = this.props.routes.find(function (route) {
          return route.path === newPath;
        });
        if (!matchingRoute) {
          window.history.pushState({}, '', '/not-found');
          this.setState({
            currentPath: '/not-found'
          });
        } else {
          var prevInstance = this.state.componentInstances[this.state.currentPath];
          if (prevInstance && prevInstance.componentWillUnmount) {
            prevInstance.componentWillUnmount();
          }
          this.setState({
            currentPath: newPath
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener('popstate', this.handleUrlChange);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
          currentPath = _this$state.currentPath,
          componentInstances = _this$state.componentInstances;
        var componentInstance = componentInstances[currentPath] || componentInstances['/not-found'];
        return CreateElement({
          componentClass: componentInstance.constructor,
          props: _objectSpread2({}, componentInstance.props)
        });
      }
    }]);
    return BrowserRouter;
  }(Component);

  var Route = /*#__PURE__*/_createClass(function Route(path, component) {
    _classCallCheck(this, Route);
    this.path = path;
    this.component = component;
  });

  var _excluded$1 = ["to", "children"];
  var Link = /*#__PURE__*/function (_Component) {
    _inherits(Link, _Component);
    var _super = _createSuper(Link);
    function Link(props) {
      var _this;
      _classCallCheck(this, Link);
      _this = _super.call(this, props);
      _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(Link, [{
      key: "handleClick",
      value: function handleClick(event) {
        event.preventDefault();
        window.history.pushState({}, '', this.props.to);
        window.dispatchEvent(new PopStateEvent('popstate'));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          to = _this$props.to,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, _excluded$1);
        return CreateElement({
          tagName: 'a',
          props: _objectSpread2(_objectSpread2({}, rest), {}, {
            href: to,
            onClick: this.handleClick
          }),
          children: children
        });
      }
    }]);
    return Link;
  }(Component);

  function fetchData(_x) {
    return _fetchData.apply(this, arguments);
  }
  function _fetchData() {
    _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
      var options,
        defaultOptions,
        finalOptions,
        response,
        errorData,
        _args = arguments;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            defaultOptions = {
              method: "GET",
              headers: {
                "Content-Type": "application/json"
              }
            };
            finalOptions = _objectSpread2(_objectSpread2({}, defaultOptions), options);
            if (finalOptions.body && _typeof(finalOptions.body) === "object") {
              finalOptions.body = JSON.stringify(finalOptions.body);
            }
            _context.prev = 4;
            _context.next = 7;
            return fetch(url, finalOptions);
          case 7:
            response = _context.sent;
            if (response.ok) {
              _context.next = 13;
              break;
            }
            _context.next = 11;
            return response.json();
          case 11:
            errorData = _context.sent;
            throw new Error("Erreur HTTP: ".concat(response.status), {
              cause: errorData
            });
          case 13:
            _context.next = 15;
            return response.json();
          case 15:
            return _context.abrupt("return", _context.sent);
          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](4);
            console.error("Erreur dans fetchCustom:", _context.t0);
            throw _context.t0;
          case 22:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[4, 18]]);
    }));
    return _fetchData.apply(this, arguments);
  }

  var Navbar = /*#__PURE__*/function (_Component) {
    _inherits(Navbar, _Component);
    var _super = _createSuper(Navbar);
    function Navbar() {
      _classCallCheck(this, Navbar);
      return _super.apply(this, arguments);
    }
    _createClass(Navbar, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'header',
          props: {
            className: ' header navbar'
          },
          children: [CreateElement({
            tagName: 'div',
            props: {
              className: 'container'
            },
            children: [CreateElement({
              componentClass: Link,
              props: {
                to: '/',
                id: 'logo-link'
              },
              children: [CreateElement({
                tagName: 'img',
                props: {
                  src: '/paris2024_logo_v2.gif',
                  className: 'navbar-logo'
                }
              })]
            }), CreateElement({
              tagName: 'nav',
              props: {
                id: 'site-nav'
              },
              children: [CreateElement({
                tagName: 'ul',
                children: [CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '/',
                      className: 'nav-link',
                      textContent: 'Accueil'
                    }
                  })]
                }), CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '/evenements',
                      className: 'nav-link',
                      textContent: 'Événements'
                    }
                  })]
                }), CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '/carte',
                      className: 'nav-link',
                      textContent: 'Carte'
                    }
                  })]
                })]
              })]
            })]
          })]
        });
      }
    }]);
    return Navbar;
  }(Component);

  var Article = /*#__PURE__*/function (_Component) {
    _inherits(Article, _Component);
    var _super = _createSuper(Article);
    function Article() {
      _classCallCheck(this, Article);
      return _super.apply(this, arguments);
    }
    _createClass(Article, [{
      key: "render",
      value: function render() {
        return CreateElement(_defineProperty(_defineProperty(_defineProperty({
          tagName: 'div'
        }, "tagName", 'article'), "props", _objectSpread2({
          className: "events ".concat(this.props.className || '')
        }, this.props)), "children", [CreateElement({
          tagName: 'div',
          children: [CreateElement({
            tagName: 'img',
            props: {
              src: this.props.src || '',
              alt: this.props.imageAlt || ''
            }
          })]
        }), CreateElement({
          tagName: 'div',
          children: [CreateElement({
            tagName: 'h1',
            children: [CreateElement({
              componentClass: Link,
              props: {
                to: this.props.link || '',
                className: 'link-event',
                textContent: this.props.title || ''
              }
            })]
          }), CreateElement({
            tagName: 'P',
            props: {
              textContent: this.props.subtitle || ''
            }
          })]
        })]));
      }
    }]);
    return Article;
  }(Component);

  var Button$1 = /*#__PURE__*/function (_Component) {
    _inherits(Button, _Component);
    var _super = _createSuper(Button);
    function Button() {
      _classCallCheck(this, Button);
      return _super.apply(this, arguments);
    }
    _createClass(Button, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'button',
          props: {
            id: this.props.id || '',
            className: "button ".concat(this.props.className || '')
          },
          children: [CreateElement({
            componentClass: Link,
            props: {
              to: this.props.to || '/',
              className: 'btn-events',
              textContent: this.props.textContent || 'Default Text'
            }
          })]
        });
      }
    }]);
    return Button;
  }(Component);

  var CountdownOlympics = /*#__PURE__*/function (_Component) {
    _inherits(CountdownOlympics, _Component);
    var _super = _createSuper(CountdownOlympics);
    function CountdownOlympics(props) {
      var _this;
      _classCallCheck(this, CountdownOlympics);
      _this = _super.call(this, props);

      // Date d'ouverture Jeux Olympiques (26 juillet 2024 à 20h24)
      var olympicsDate = new Date(2024, 6, 26, 20, 24, 0);
      _this.interval = setInterval(function () {
        var currentDate = new Date();
        var timeDifference = olympicsDate.getTime() - currentDate.getTime();
        var days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
        var hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
        var minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));
        var seconds = Math.floor(timeDifference % (1000 * 60) / 1000);
        _this.setState({
          days: days,
          hours: hours,
          minutes: minutes,
          seconds: seconds
        });
        if (timeDifference <= 0) {
          clearInterval(_this.interval);
        }
      }, 1000);
      return _this;
    }
    _createClass(CountdownOlympics, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearInterval(this.interval);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
          days = _this$state.days,
          hours = _this$state.hours,
          minutes = _this$state.minutes,
          seconds = _this$state.seconds;
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'countdown'
          },
          children: [CreateElement({
            tagName: 'div',
            props: {
              className: 'countdown__item',
              textContent: 'Jusqu\'aux Jeux Olympiques de Paris 2024'
            }
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'countdown__jours'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: days
              }
            }), CreateElement({
              tagName: 'p',
              props: {
                textContent: 'JOURS'
              }
            })]
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'countdown__heures'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: hours
              }
            }), CreateElement({
              tagName: 'p',
              props: {
                textContent: 'HEURES'
              }
            })]
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'countdown__minutes'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: minutes
              }
            }), CreateElement({
              tagName: 'p',
              props: {
                textContent: 'MINUTES'
              }
            })]
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'countdown__secondes'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: seconds
              }
            }), CreateElement({
              tagName: 'p',
              props: {
                textContent: 'SECONDES'
              }
            })]
          })]
        });
      }
    }]);
    return CountdownOlympics;
  }(Component);

  var Footer = /*#__PURE__*/function (_Component) {
    _inherits(Footer, _Component);
    var _super = _createSuper(Footer);
    function Footer() {
      _classCallCheck(this, Footer);
      return _super.apply(this, arguments);
    }
    _createClass(Footer, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'footer',
          children: [CreateElement({
            tagName: 'div',
            props: {
              className: 'container'
            },
            children: [CreateElement({
              tagName: 'nav',
              children: [CreateElement({
                tagName: 'ul',
                children: [CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '#',
                      textContent: 'Légal'
                    }
                  })]
                }), CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '#',
                      textContent: 'Cookies'
                    }
                  })]
                }), CreateElement({
                  tagName: 'li',
                  children: [CreateElement({
                    componentClass: Link,
                    props: {
                      to: '#',
                      textContent: 'À propos des pubs'
                    }
                  })]
                })]
              }), CreateElement({
                tagName: 'small',
                props: {
                  textContent: '© 2024  All rights reserved.'
                }
              })]
            })]
          })]
        });
      }
    }]);
    return Footer;
  }(Component);

  var Home = /*#__PURE__*/function (_Component) {
    _inherits(Home, _Component);
    var _super = _createSuper(Home);
    function Home(props) {
      var _this;
      _classCallCheck(this, Home);
      _this = _super.call(this, props);
      _this.state = {
        locations: [],
        loading: true
      };
      return _this;
    }
    _createClass(Home, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var data, locations, closestFiveActivities;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return fetchData("/data/dataJo.json");
              case 3:
                data = _context.sent;
                locations = data.locations;
                closestFiveActivities = this.calculateClosestActivities(locations);
                this.setState(function () {
                  return {
                    locations: locations,
                    loading: false,
                    closestFiveActivities: closestFiveActivities
                  };
                });
                _context.next = 13;
                break;
              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](0);
                console.error("Erreur lors du chargement des données:", _context.t0);
                this.setState(function () {
                  return {
                    loading: false
                  };
                });
              case 13:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[0, 9]]);
        }));
        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }
        return componentDidMount;
      }()
    }, {
      key: "calculateClosestActivities",
      value: function calculateClosestActivities(locations) {
        var currentDate = new Date();
        var closestActivities = [];
        locations.forEach(function (location) {
          location.disciplines.forEach(function (discipline) {
            discipline.events.forEach(function (event) {
              var eventDate = new Date(event.date);
              var timeDiff = Math.abs(eventDate - currentDate);
              if (eventDate > currentDate) {
                var _event$sessions$;
                closestActivities.push({
                  discipline: discipline.name,
                  eventDate: event.date,
                  timeDiff: timeDiff,
                  activities: event === null || event === void 0 || (_event$sessions$ = event.sessions[0]) === null || _event$sessions$ === void 0 ? void 0 : _event$sessions$.activities
                });
              }
            });
          });
        });
        closestActivities.sort(function (a, b) {
          return a.timeDiff - b.timeDiff;
        });
        var closestFiveActivities = closestActivities.slice(0, 5);
        return closestFiveActivities;
      }
    }, {
      key: "render",
      value: function render() {
        var locations = this.state.locations;
        var closestFiveActivities = this.calculateClosestActivities(locations);
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'home'
          },
          children: [CreateElement({
            componentClass: Navbar
          }), CreateElement({
            tagName: 'main',
            props: {
              className: 'main__home'
            },
            children: [CreateElement({
              tagName: 'section',
              props: {
                id: 'section1'
              },
              children: [CreateElement({
                tagName: 'div',
                props: {
                  className: 'container'
                },
                children: [CreateElement({
                  tagName: 'div',
                  children: [CreateElement({
                    tagName: 'div',
                    children: [CreateElement({
                      tagName: 'h1',
                      props: {
                        textContent: 'Vivez les Jeux Olympiques'
                      }
                    }), CreateElement({
                      tagName: 'h2',
                      props: {
                        textContent: 'Explorez, découvrez, vibrez'
                      }
                    }), CreateElement({
                      componentClass: Button$1,
                      props: {
                        to: '/about',
                        className: 'btn-event',
                        textContent: 'Explorer la Carte'
                      }
                    })]
                  })]
                }), CreateElement({
                  componentClass: CountdownOlympics
                })]
              })]
            }), CreateElement({
              tagName: 'section',
              props: {
                id: 'section2'
              },
              children: [CreateElement({
                tagName: 'div',
                props: {
                  className: 'container'
                },
                children: [CreateElement({
                  tagName: 'h1',
                  props: {
                    textContent: 'Evenements à venir'
                  }
                }), CreateElement({
                  tagName: 'div',
                  children: [].concat(_toConsumableArray(closestFiveActivities.map(function (activity) {
                    return CreateElement({
                      componentClass: Article,
                      props: {
                        title: activity.discipline,
                        subtitle: activity.activities.join(', '),
                        src: '../imag1.webp',
                        imageAlt: 'Texte alternatif'
                      }
                    });
                  })), [CreateElement({
                    componentClass: Button$1,
                    props: {
                      to: '/about',
                      className: 'btn-event',
                      textContent: 'Voir tous les événements'
                    }
                  })])
                })]
              })]
            })]
          }), CreateElement({
            componentClass: Footer
          })]
        });
      }
    }]);
    return Home;
  }(Component);

  var NotFound = /*#__PURE__*/function (_Component) {
    _inherits(NotFound, _Component);
    var _super = _createSuper(NotFound);
    function NotFound() {
      _classCallCheck(this, NotFound);
      return _super.apply(this, arguments);
    }
    _createClass(NotFound, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'not-found'
          },
          children: [CreateElement({
            tagName: 'h1',
            props: {
              textContent: '404'
            }
          }), CreateElement({
            tagName: 'p',
            props: {
              textContent: 'Oups! La page que vous cherchez semble introuvable.'
            }
          }), CreateElement({
            tagName: 'a',
            props: {
              href: '/',
              textContent: 'Retour à l\'accueil',
              className: 'not-found-home-link'
            }
          })]
        });
      }
    }]);
    return NotFound;
  }(Component);

  var settings = [{
    elementType: 'geometry',
    stylers: [{
      color: '#ebebeb'
    }]
  }, {
    elementType: 'labels.icon',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'administrative.land_parcel',
    elementType: 'labels',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'administrative.land_parcel',
    elementType: 'labels.text.fill',
    stylers: [{
      visibility: 'on'
    }]
  }, {
    featureType: 'administrative.province',
    elementType: 'labels.text',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'poi',
    elementType: 'geometry',
    stylers: [{
      color: '#eeeeee'
    }]
  }, {
    featureType: 'poi',
    elementType: 'labels.text',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'poi',
    elementType: 'labels.text.fill',
    stylers: [{
      color: '#757575'
    }]
  }, {
    featureType: 'poi.park',
    elementType: 'geometry',
    stylers: [{
      color: '#00eb00'
    }, {
      saturation: -65
    }, {
      lightness: 75
    }, {
      visibility: 'simplified'
    }]
  }, {
    featureType: 'poi.park',
    elementType: 'labels.text.fill',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'poi.school',
    elementType: 'geometry',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'road',
    elementType: 'geometry',
    stylers: [{
      color: '#ffffff'
    }, {
      visibility: 'simplified'
    }]
  }, {
    featureType: 'road',
    elementType: 'geometry.fill',
    stylers: [{
      visibility: 'simplified'
    }]
  }, {
    featureType: 'road.arterial',
    elementType: 'geometry',
    stylers: [{
      color: '#ffffff'
    }]
  }, {
    featureType: 'road.arterial',
    elementType: 'labels.text.fill',
    stylers: [{
      color: '#757575'
    }]
  }, {
    featureType: 'road.highway',
    elementType: 'geometry',
    stylers: [{
      color: '#0096ff'
    }, {
      saturation: -85
    }, {
      lightness: 60
    }]
  }, {
    featureType: 'road.highway',
    elementType: 'labels.text',
    stylers: [{
      color: '#ffffff'
    }, {
      lightness: 70
    }, {
      visibility: 'on'
    }]
  }, {
    featureType: 'road.highway',
    elementType: 'labels.text.fill',
    stylers: [{
      color: '#616161'
    }]
  }, {
    featureType: 'road.local',
    elementType: 'labels',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'road.local',
    elementType: 'labels.text',
    stylers: [{
      visibility: 'simplified'
    }]
  }, {
    featureType: 'road.local',
    elementType: 'labels.text.fill',
    stylers: [{
      color: '#9e9e9e'
    }]
  }, {
    featureType: 'transit.line',
    elementType: 'geometry',
    stylers: [{
      color: '#e5e5e5'
    }]
  }, {
    featureType: 'transit.station',
    elementType: 'geometry',
    stylers: [{
      color: '#eeeeee'
    }]
  }, {
    featureType: 'transit.station',
    elementType: 'labels.text',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'transit.station',
    elementType: 'labels.text.stroke',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'transit.station.bus',
    elementType: 'geometry',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'transit.station.rail',
    elementType: 'geometry',
    stylers: [{
      color: '#d80000'
    }, {
      visibility: 'off'
    }]
  }, {
    featureType: 'transit.station.rail',
    elementType: 'geometry.fill',
    stylers: [{
      visibility: 'off'
    }]
  }, {
    featureType: 'water',
    elementType: 'geometry',
    stylers: [{
      color: '#0984cb'
    }, {
      saturation: -30
    }, {
      lightness: 60
    }, {
      visibility: 'simplified'
    }]
  }, {
    featureType: 'water',
    elementType: 'labels.text.fill',
    stylers: [{
      color: '#ffffff'
    }]
  }, {
    featureType: 'water',
    elementType: 'labels.text.stroke',
    stylers: [{
      visibility: 'off'
    }]
  }];

  function calculateDistance(location1, location2) {
    var earthRadius = 6371e3;
    var lat1 = location1.lat * Math.PI / 180;
    var lat2 = location2.lat * Math.PI / 180;
    var deltaLat = (location2.lat - location1.lat) * Math.PI / 180;
    var deltaLng = (location2.lng - location1.lng) * Math.PI / 180;
    var a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLng / 2) * Math.sin(deltaLng / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return earthRadius * c;
  }

  function calculateCenter(locations, userLocation) {
    var defaultCenter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      lat: 48.859,
      lng: 2.34
    };
    var latSum = 0,
      lngSum = 0,
      count = 0;
    locations.forEach(function (location) {
      latSum += location.location.lat;
      lngSum += location.location.lng;
      count++;
    });
    if (userLocation) {
      latSum += userLocation.lat;
      lngSum += userLocation.lng;
      count++;
    }
    var centerLat = count > 0 ? latSum / count : defaultCenter.lat;
    var centerLng = count > 0 ? lngSum / count : defaultCenter.lng;
    return {
      lat: centerLat,
      lng: centerLng
    };
  }

  var MapContainer = /*#__PURE__*/function (_Component) {
    _inherits(MapContainer, _Component);
    var _super = _createSuper(MapContainer);
    function MapContainer(props) {
      var _this;
      _classCallCheck(this, MapContainer);
      _this = _super.call(this, props);
      _this.map = null;
      _this.markers = [];
      _this.initMap = _this.initMap.bind(_assertThisInitialized(_this));
      _this.addMarkersToMap = _this.addMarkersToMap.bind(_assertThisInitialized(_this));
      _this.clearMarkers = _this.clearMarkers.bind(_assertThisInitialized(_this));
      _this.openDirections = _this.openDirections.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(MapContainer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (window.google) {
          this.initMap();
        } else {
          window.initMap = this.initMap;
          this.loadGoogleMapsScript();
        }
      }
    }, {
      key: "adjustZoomToMarkers",
      value: function adjustZoomToMarkers(locations, userLocation) {
        var bounds = new google.maps.LatLngBounds();
        locations.forEach(function (location) {
          bounds.extend(new google.maps.LatLng(location.location.lat, location.location.lng));
        });
        if (userLocation) {
          bounds.extend(new google.maps.LatLng(userLocation.lat, userLocation.lng));
        }
        this.map.fitBounds(bounds);
      }
    }, {
      key: "filterLocationsWithinRadius",
      value: function filterLocationsWithinRadius(locations, userLocation, radiusKm) {
        if (!userLocation) return locations;
        return locations.filter(function (location) {
          var distance = calculateDistance(userLocation, location.location);
          return distance <= radiusKm * 1000;
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var shouldRecenter = false;
        var radiusKm = 30;
        var nearbyLocations;
        if (this.props.locations !== prevProps.locations || this.props.userLocation !== prevProps.userLocation) {
          nearbyLocations = this.filterLocationsWithinRadius(this.props.locations, this.props.userLocation, radiusKm);
          this.clearMarkers();
          this.addMarkersToMap(nearbyLocations);
          this.addUserMarker(this.props.userLocation);
          shouldRecenter = true;
        }
        if (shouldRecenter && this.map && nearbyLocations) {
          var newCenter = calculateCenter(nearbyLocations, this.props.userLocation);
          this.map.setCenter(new google.maps.LatLng(newCenter.lat, newCenter.lng));
        }
        if (shouldRecenter) {
          this.adjustZoomToMarkers(nearbyLocations, this.props.userLocation);
        }
      }
    }, {
      key: "loadGoogleMapsScript",
      value: function loadGoogleMapsScript() {
        var script = document.createElement('script');
        script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyDztaMSHnohf0QVkCMsVfAvQYzKMnWGd5g&callback=initMap";
        script.async = true;
        document.head.appendChild(script);
      }
    }, {
      key: "initMap",
      value: function () {
        var _initMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var mapElement, radiusKm, nearbyLocations, center;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return new Promise(function (resolve) {
                  return setTimeout(resolve, 0);
                });
              case 2:
                mapElement = document.getElementById(this.props.id);
                radiusKm = 30;
                nearbyLocations = this.filterLocationsWithinRadius(this.props.locations, this.props.userLocation, radiusKm);
                center = calculateCenter(nearbyLocations, this.props.userLocation);
                this.map = new google.maps.Map(mapElement, {
                  center: {
                    lat: center.lat,
                    lng: center.lng
                  },
                  zoom: 11,
                  styles: settings
                });
                if (this.props.userLocation) {
                  this.addUserMarker(this.props.userLocation);
                }
                this.addMarkersToMap(nearbyLocations);
                this.adjustZoomToMarkers(this.props.locations, this.props.userLocation);
              case 10:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function initMap() {
          return _initMap.apply(this, arguments);
        }
        return initMap;
      }()
    }, {
      key: "addUserMarker",
      value: function addUserMarker(userLocation) {
        if (!userLocation) return;
        new google.maps.Marker({
          position: userLocation,
          map: this.map,
          icon: {
            url: '/images/markers/CFR-4.png',
            scaledSize: new google.maps.Size(30, 30)
          },
          title: 'Votre position'
        });
      }
    }, {
      key: "addMarkersToMap",
      value: function addMarkersToMap(locations) {
        var _this2 = this;
        this.clearMarkers();
        locations.forEach(function (location) {
          var marker = new google.maps.Marker({
            position: location.location,
            map: _this2.map,
            icon: {
              url: '/images/markers/CFR-1.png',
              scaledSize: new google.maps.Size(30, 30)
            },
            title: location.name
          });
          var imagesHTML = location.images.map(function (img) {
            return "\n      <div class=\"info-window-image-container\">\n        <img src=\"".concat(img, "\" alt=\"").concat(location.name, "\" class=\"info-window-image\">\n      </div>\n    ");
          }).join('');
          var discplinesHTML = location.disciplines.map(function (discipline) {
            return "<span class=\"info-window-discipline\">".concat(discipline.name, "</span>");
          }).join(', ');
          var infoWindowContent = "\n      <div class=\"info-window-content\">\n        <h3 class=\"info-window-title\">".concat(location.name, "</h3>\n        <div class=\"info-window-body\">\n            <div class=\"info-window-carousel\">\n                ").concat(imagesHTML, "\n            </div>\n          <div class=\"info-window-details\">\n            <div class=\"info-window-disciplines\">\n              <h5>Sports</h5>\n              <p class=\"disciplines\" >").concat(discplinesHTML, "</p>\n            </div>\n            <div class=\"info-window-description\">\n              <h5>Description</h5>\n              <p>").concat(location.description, "</p>\n            </div>\n          </div>\n          <div class=\"info-window-button-container\">\n              <button class=\"info-window-button\" id=\"direction-btn-").concat(location.id, "\">Itin\xE9raire</button>\n          </div>\n        </div>\n      </div>");
          var infoWindow = new google.maps.InfoWindow({
            content: infoWindowContent
          });
          marker.addListener('click', function () {
            infoWindow.open(_this2.map, marker);
            google.maps.event.addListenerOnce(infoWindow, 'domready', function () {
              document.getElementById("direction-btn-".concat(location.id)).addEventListener('click', function () {
                _this2.openDirections(location.location.lat, location.location.lng);
              });
            });
          });
          _this2.markers.push(marker);
        });
      }
    }, {
      key: "openDirections",
      value: function openDirections(lat, lng) {
        var userLocation = this.props.userLocation;
        var travelMode = 'DRIVING';
        var directionUrl = "https://www.google.com/maps/dir/?api=1&origin=".concat(userLocation.lat, ",").concat(userLocation.lng, "&destination=").concat(lat, ",").concat(lng, "&travelmode=").concat(travelMode);
        window.open(directionUrl, '_blank');
      }
    }, {
      key: "clearMarkers",
      value: function clearMarkers() {
        this.markers.forEach(function (marker) {
          return marker.setMap(null);
        });
        this.markers = [];
      }
    }, {
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'div',
          props: {
            id: this.props.id,
            style: {
              width: '100%',
              height: '100%'
            }
          }
        });
      }
    }]);
    return MapContainer;
  }(Component);

  var SpotCard = /*#__PURE__*/function (_Component) {
    _inherits(SpotCard, _Component);
    var _super = _createSuper(SpotCard);
    function SpotCard() {
      _classCallCheck(this, SpotCard);
      return _super.apply(this, arguments);
    }
    _createClass(SpotCard, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          name = _this$props.name,
          image = _this$props.image,
          description = _this$props.description,
          onClick = _this$props.onClick,
          discplines = _this$props.discplines,
          distance = _this$props.distance;
        var distanceElement = distance ? CreateElement({
          tagName: 'p',
          props: {
            textContent: "\xC0 ".concat(distance.toFixed(2), " km de vous"),
            className: 'spot-distance'
          }
        }) : null;
        var renderDisciplines = discplines.map(function (discipline) {
          var dateBadges = discipline.dateEvents.split(', ').map(function (date) {
            return CreateElement({
              tagName: 'span',
              props: {
                className: 'date-badge',
                textContent: date
              }
            });
          });
          return CreateElement({
            tagName: 'li',
            props: {
              className: 'spot-discipline'
            },
            children: [CreateElement({
              tagName: 'span',
              props: {
                textContent: discipline.name,
                className: 'discipline-name'
              }
            })].concat(_toConsumableArray(dateBadges))
          });
        });
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'spot-card',
            onClick: onClick
          },
          children: [CreateElement({
            tagName: 'img',
            props: {
              src: image,
              alt: "Image de ".concat(name),
              className: 'spot-image'
            }
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'spot-info'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: name,
                className: 'spot-name'
              }
            }), CreateElement({
              tagName: 'p',
              props: {
                textContent: description,
                className: 'spot-description'
              }
            }), CreateElement({
              tagName: 'h6',
              props: {
                textContent: 'Sports',
                className: 'spot-name'
              }
            }), CreateElement({
              tagName: 'ul',
              props: {
                className: 'spot-disciplines'
              },
              children: renderDisciplines
            }), distanceElement]
          })]
        });
      }
    }]);
    return SpotCard;
  }(Component);

  var DatePicker = /*#__PURE__*/function (_Component) {
    _inherits(DatePicker, _Component);
    var _super = _createSuper(DatePicker);
    function DatePicker(props) {
      var _this;
      _classCallCheck(this, DatePicker);
      _this = _super.call(this, props);
      _this.state = {
        selectedDate: ''
      };
      _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(DatePicker, [{
      key: "handleDateChange",
      value: function handleDateChange(event) {
        var selectedDate = event.target.value;
        this.setState({
          selectedDate: selectedDate
        });
        if (this.props.onDateChange) {
          this.props.onDateChange(selectedDate);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'input',
          props: {
            type: 'date',
            value: this.state.selectedDate,
            onInput: this.handleDateChange,
            className: "date-picker ".concat(this.props.className || '')
          }
        });
      }
    }]);
    return DatePicker;
  }(Component);

  var Select = /*#__PURE__*/function (_Component) {
    _inherits(Select, _Component);
    var _super = _createSuper(Select);
    function Select() {
      _classCallCheck(this, Select);
      return _super.apply(this, arguments);
    }
    _createClass(Select, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'select',
          props: _objectSpread2(_objectSpread2({}, this.props), {}, {
            className: "select ".concat(this.props.className || '')
          }),
          children: this.props.options.map(function (option) {
            return CreateElement({
              tagName: 'option',
              props: {
                value: option.value,
                textContent: option.label
              }
            });
          })
        });
      }
    }]);
    return Select;
  }(Component);

  var ProximityFilter = /*#__PURE__*/function (_MiniReact$Component) {
    _inherits(ProximityFilter, _MiniReact$Component);
    var _super = _createSuper(ProximityFilter);
    function ProximityFilter(props) {
      var _this;
      _classCallCheck(this, ProximityFilter);
      _this = _super.call(this, props);
      _this.state = {
        selectedDistance: ''
      };
      _this.handleDistanceChange = _this.handleDistanceChange.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(ProximityFilter, [{
      key: "handleDistanceChange",
      value: function handleDistanceChange(event) {
        var selectedDistance = event.target.value;
        this.setState({
          selectedDistance: selectedDistance
        });
        if (this.props.onDistanceChange) {
          this.props.onDistanceChange(selectedDistance);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var distanceOptions = [{
          value: '',
          label: 'Distance'
        }, {
          value: '2',
          label: 'Moins de 2 km'
        }, {
          value: '4',
          label: 'Moins de 4 km'
        }, {
          value: '6',
          label: 'Moins de 6 km'
        }, {
          value: '10',
          label: 'Moins de 10 km'
        }, {
          value: '20',
          label: 'Moins de 20 km'
        }, {
          value: '30',
          label: 'Moins de 30 km'
        }, {
          value: '40',
          label: 'Moins de 40 km'
        }, {
          value: '50',
          label: 'Moins de 50 km'
        }];
        return MiniReact.CreateElement({
          componentClass: Select,
          props: {
            options: distanceOptions,
            onInput: this.handleDistanceChange,
            value: this.state.selectedDistance,
            className: 'select-filter'
          }
        });
      }
    }]);
    return ProximityFilter;
  }(MiniReact.Component);

  var Input = /*#__PURE__*/function (_Component) {
    _inherits(Input, _Component);
    var _super = _createSuper(Input);
    function Input() {
      _classCallCheck(this, Input);
      return _super.apply(this, arguments);
    }
    _createClass(Input, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'input',
          props: _objectSpread2(_objectSpread2({}, this.props), {}, {
            className: "input ".concat(this.props.className || '')
          })
        });
      }
    }]);
    return Input;
  }(Component);

  var _excluded = ["textContent", "className"];
  var Button = /*#__PURE__*/function (_Component) {
    _inherits(Button, _Component);
    var _super = _createSuper(Button);
    function Button() {
      _classCallCheck(this, Button);
      return _super.apply(this, arguments);
    }
    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          textContent = _this$props.textContent,
          className = _this$props.className,
          rest = _objectWithoutProperties(_this$props, _excluded);
        return CreateElement({
          tagName: 'button',
          props: _objectSpread2(_objectSpread2({}, rest), {}, {
            className: "button ".concat(className || ''),
            textContent: textContent
          })
        });
      }
    }]);
    return Button;
  }(Component);

  var SearchBar = /*#__PURE__*/function (_Component) {
    _inherits(SearchBar, _Component);
    var _super = _createSuper(SearchBar);
    function SearchBar(props) {
      var _this;
      _classCallCheck(this, SearchBar);
      _this = _super.call(this, props);
      _this.state = {
        query: ''
      };
      _this.handleInput = _this.handleInput.bind(_assertThisInitialized(_this));
      _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(SearchBar, [{
      key: "handleInput",
      value: function handleInput(event) {
        var value = event.target.value;
        this.setState({
          query: value
        });
        if (this.props.onSearchChange) {
          this.props.onSearchChange(value);
        }
      }
    }, {
      key: "handleSubmit",
      value: function handleSubmit(event) {
        event.preventDefault();
        if (this.props.onSearch) {
          this.props.onSearch(this.state.query);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var inputElement = CreateElement({
          componentClass: Input,
          props: {
            type: 'text',
            placeholder: 'Rechercher par activité ou discipline...',
            value: this.state.query,
            onInput: this.handleInput,
            className: 'search-input'
          }
        });
        var buttonElement = this.props.showButton !== false ? CreateElement({
          componentClass: Button,
          props: {
            type: 'submit',
            textContent: 'Rechercher',
            className: 'search-button'
          }
        }) : null;
        return CreateElement({
          tagName: 'form',
          props: {
            onSubmit: this.handleSubmit,
            className: 'search-bar'
          },
          children: [inputElement, buttonElement].filter(Boolean)
        });
      }
    }]);
    return SearchBar;
  }(Component);

  var Spinner = /*#__PURE__*/function (_Component) {
    _inherits(Spinner, _Component);
    var _super = _createSuper(Spinner);
    function Spinner() {
      _classCallCheck(this, Spinner);
      return _super.apply(this, arguments);
    }
    _createClass(Spinner, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: "div",
          props: {
            className: "loader"
          },
          children: [CreateElement({
            tagName: "div",
            props: {
              className: "spinner"
            }
          })]
        });
      }
    }]);
    return Spinner;
  }(Component);

  function isWithinDistance(location1, location2, selectedDistance) {
    var distance = calculateDistance(location1, location2);
    return distance <= selectedDistance * 1000;
  }

  var SpotDetail = /*#__PURE__*/function (_Component) {
    _inherits(SpotDetail, _Component);
    var _super = _createSuper(SpotDetail);
    function SpotDetail() {
      var _this;
      _classCallCheck(this, SpotDetail);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "openDirections", function (userLocation, location) {
        var travelMode = 'DRIVING';
        var directionUrl = "https://www.google.com/maps/dir/?api=1&origin=".concat(userLocation.lat, ",").concat(userLocation.lng, "&destination=").concat(location.lat, ",").concat(location.lng, "&travelmode=").concat(travelMode);
        window.open(directionUrl, '_blank');
      });
      return _this;
    }
    _createClass(SpotDetail, [{
      key: "renderActivities",
      value: function renderActivities(activities) {
        if (!activities) return null;
        return activities.map(function (activity) {
          return CreateElement({
            tagName: 'span',
            props: {
              textContent: activity,
              className: 'activity-badge'
            }
          });
        });
      }
    }, {
      key: "renderSessions",
      value: function renderSessions(sessions, date) {
        var _this2 = this;
        if (!sessions) return null;
        var formatedDate = date ? new Date(date).toLocaleDateString('fr-FR', {
          weekday: 'long',
          day: 'numeric',
          month: 'long'
        }) : null;
        return sessions.map(function (session) {
          return CreateElement({
            tagName: 'div',
            props: {
              className: 'session-detail'
            },
            children: [CreateElement({
              tagName: 'h4',
              props: {
                textContent: "".concat(formatedDate, " ").concat(session.startTime, " - ").concat(session.endTime),
                className: 'session-time'
              }
            })].concat(_toConsumableArray(_this2.renderActivities(session.activities)))
          });
        });
      }
    }, {
      key: "renderEvents",
      value: function renderEvents(events) {
        var _this3 = this;
        if (!events) return null;
        return events.map(function (event) {
          return CreateElement({
            tagName: 'div',
            props: {
              className: 'event-item'
            },
            children: [CreateElement({
              tagName: 'h3',
              props: {
                textContent: event.name,
                className: 'event-name'
              }
            }), CreateElement({
              tagName: 'div',
              props: {
                className: 'session-container'
              },
              children: _this3.renderSessions(event.sessions, event.date)
            })]
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;
        var _this$props = this.props,
          spot = _this$props.spot,
          onClose = _this$props.onClose;
        var name = spot.name,
          _spot$images = spot.images,
          images = _spot$images === void 0 ? [] : _spot$images,
          description = spot.description,
          disciplines = spot.disciplines,
          distance = spot.distance,
          location = spot.location,
          userLocation = spot.userLocation;
        var events = disciplines.flatMap(function (discipline) {
          return discipline.events;
        });
        var renderDistanceAndDirections = userLocation && distance ? CreateElement({
          tagName: 'div',
          props: {
            className: 'distance-and-directions'
          },
          children: [CreateElement({
            tagName: 'div',
            props: {
              textContent: "\xC0 ".concat(distance.toFixed(2), " km de vous"),
              className: 'distance-info'
            }
          }), CreateElement({
            tagName: 'button',
            props: {
              className: 'directions-button',
              textContent: 'Itinéraire',
              onClick: function onClick() {
                return _this4.openDirections(userLocation, location);
              }
            }
          })]
        }) : null;
        var imageElements = images.length > 1 ? images.map(function (image) {
          return CreateElement({
            tagName: 'div',
            props: {
              className: 'carousel-item'
            },
            children: [CreateElement({
              tagName: 'img',
              props: {
                src: image,
                alt: "Image de ".concat(name),
                className: 'spot-detail-image'
              }
            })]
          });
        }) : [CreateElement({
          tagName: 'img',
          props: {
            src: images[0],
            alt: "Image de ".concat(name),
            className: 'spot-detail-image'
          }
        })];
        var imageCarousel = CreateElement({
          tagName: 'div',
          props: {
            className: 'carousel'
          },
          children: imageElements
        });
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'spot-detail'
          },
          children: [CreateElement({
            componentClass: Button,
            props: {
              textContent: '×',
              className: 'close-button',
              onClick: onClose
            }
          }), CreateElement({
            tagName: 'h2',
            props: {
              textContent: name,
              className: 'spot-title'
            }
          }), imageCarousel, renderDistanceAndDirections, CreateElement({
            tagName: 'p',
            props: {
              textContent: description,
              className: 'spot-detail-description'
            }
          })].concat(_toConsumableArray(this.renderEvents(events)))
        });
      }
    }]);
    return SpotDetail;
  }(Component);

  var ExplorerEvent = /*#__PURE__*/function (_Component) {
    _inherits(ExplorerEvent, _Component);
    var _super = _createSuper(ExplorerEvent);
    function ExplorerEvent(props) {
      var _this;
      _classCallCheck(this, ExplorerEvent);
      _this = _super.call(this, props);
      _this.state = {
        locations: [],
        selectedDate: null,
        selectedDistance: null,
        searchTerm: null,
        userLocation: null,
        selectedSpot: null,
        loading: true,
        showModal: false
      };
      _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_this));
      _this.handleDistanceChange = _this.handleDistanceChange.bind(_assertThisInitialized(_this));
      _this.handleSearchChange = _this.handleSearchChange.bind(_assertThisInitialized(_this));
      _this.selectSpot = _this.selectSpot.bind(_assertThisInitialized(_this));
      _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(ExplorerEvent, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var data;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return fetchData("/data/dataJo.json");
              case 3:
                data = _context.sent;
                this.setState(function () {
                  return {
                    locations: data.locations,
                    loading: false
                  };
                });
                this.initializeGeoLocation();
                _context.next = 12;
                break;
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                console.error("Erreur lors du chargement des données:", _context.t0);
                this.setState(function () {
                  return {
                    loading: false
                  };
                });
              case 12:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[0, 8]]);
        }));
        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }
        return componentDidMount;
      }()
    }, {
      key: "initializeGeoLocation",
      value: function initializeGeoLocation() {
        var _this2 = this;
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            _this2.setState(function () {
              return {
                userLocation: {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude
                }
              };
            });
          }, function (error) {
            console.error("Erreur lors de l'obtention de la géolocalisation :", error);
          });
        } else {
          console.error("La géolocalisation n'est pas prise en charge par ce navigateur.");
        }
      }
    }, {
      key: "handleDateChange",
      value: function handleDateChange(selectedDate) {
        this.setState(function () {
          return {
            selectedDate: selectedDate
          };
        });
      }
    }, {
      key: "handleDistanceChange",
      value: function handleDistanceChange(selectedDistance) {
        this.setState(function () {
          return {
            selectedDistance: selectedDistance
          };
        });
      }
    }, {
      key: "handleSearchChange",
      value: function handleSearchChange(searchTerm) {
        this.setState(function () {
          return {
            searchTerm: searchTerm
          };
        });
      }
    }, {
      key: "selectSpot",
      value: function selectSpot(spot) {
        this.setState(function () {
          return {
            selectedSpot: spot,
            showModal: true
          };
        });
      }
    }, {
      key: "closeModal",
      value: function closeModal() {
        this.setState(function () {
          return {
            showModal: false
          };
        });
      }
    }, {
      key: "filterLocations",
      value: function filterLocations(locations, selectedDate, selectedDistance, searchTerm, userLocation) {
        var _this3 = this;
        return locations.filter(function (location) {
          if (selectedDate && !_this3.eventOnSelectedDate(location, selectedDate)) {
            return false;
          }
          if (selectedDistance && userLocation && !isWithinDistance(userLocation, location.location, selectedDistance)) {
            return false;
          }
          if (searchTerm && !_this3.matchesSearchTerm(location, searchTerm)) {
            return false;
          }
          return true;
        });
      }
    }, {
      key: "eventOnSelectedDate",
      value: function eventOnSelectedDate(location, selectedDate) {
        return location.disciplines.some(function (discipline) {
          return discipline.events.some(function (event) {
            return event.date === selectedDate;
          });
        });
      }
    }, {
      key: "matchesSearchTerm",
      value: function matchesSearchTerm(location, searchTerm) {
        return location.disciplines.some(function (discipline) {
          return discipline.name.toLowerCase().includes(searchTerm.toLowerCase()) || discipline.events.some(function (event) {
            return event.sessions.some(function (session) {
              return session.activities.some(function (activity) {
                return activity.toLowerCase().includes(searchTerm.toLowerCase());
              });
            });
          });
        });
      }
    }, {
      key: "getSpotsFromLocations",
      value: function getSpotsFromLocations(filteredLocations) {
        var _this4 = this;
        if (!filteredLocations) return [];
        return filteredLocations.flatMap(function (location) {
          return location.spots.map(function (spot) {
            var _this4$state$userLoca;
            var distance = _this4.state.userLocation ? calculateDistance(_this4.state.userLocation, spot.location) / 1000 : null;
            var disciplines = location.disciplines.filter(function (discipline) {
              return spot.disciplines.includes(discipline.name);
            });
            return _objectSpread2(_objectSpread2({}, spot), {}, {
              distance: distance,
              disciplines: disciplines,
              userLocation: (_this4$state$userLoca = _this4.state.userLocation) !== null && _this4$state$userLoca !== void 0 ? _this4$state$userLoca : null
            });
          }) || [];
        }).sort(function (a, b) {
          return a.distance - b.distance;
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;
        var _this$state = this.state,
          locations = _this$state.locations,
          selectedDate = _this$state.selectedDate,
          selectedDistance = _this$state.selectedDistance,
          searchTerm = _this$state.searchTerm,
          userLocation = _this$state.userLocation,
          loading = _this$state.loading,
          showModal = _this$state.showModal,
          selectedSpot = _this$state.selectedSpot;
        var filteredLocations = this.filterLocations(locations, selectedDate, selectedDistance, searchTerm, userLocation);
        var filteredSpots = this.getSpotsFromLocations(filteredLocations);
        var proximityMessage = userLocation ? CreateElement({
          tagName: "div",
          props: {
            textContent: "Trié par proximité",
            className: "proximity-message"
          }
        }) : null;
        var modal = showModal ? CreateElement({
          tagName: "div",
          props: {
            className: "modal-backdrop"
          },
          children: [CreateElement({
            componentClass: SpotDetail,
            props: {
              spot: selectedSpot,
              onClose: this.closeModal
            }
          })]
        }) : null;
        var filterSection = CreateElement({
          tagName: "div",
          props: {
            className: "filters"
          },
          children: [CreateElement({
            tagName: "div",
            props: {
              className: "search-bar-container"
            },
            children: [CreateElement({
              componentClass: SearchBar,
              props: {
                onSearchChange: this.handleSearchChange,
                showButton: false
              }
            })]
          }), CreateElement({
            tagName: "div",
            props: {
              className: "other-filters"
            },
            children: [CreateElement({
              componentClass: ProximityFilter,
              props: {
                onDistanceChange: this.handleDistanceChange
              }
            }), CreateElement({
              componentClass: DatePicker,
              props: {
                onDateChange: this.handleDateChange
              }
            })]
          })]
        });
        var renderSpots = CreateElement({
          tagName: "div",
          props: {
            className: "spots-list"
          },
          children: [proximityMessage].concat(_toConsumableArray(filteredSpots.map(function (spot) {
            var disciplinesForSpot = spot.disciplines.map(function (discipline) {
              var name = discipline.name;
              var dateEvents = discipline.events.map(function (event) {
                var formatedDate = new Date(event.date).toLocaleDateString('fr-FR', {
                  weekday: 'long',
                  day: 'numeric',
                  month: 'long'
                });
                return formatedDate;
              }).join(", ");
              return {
                name: name,
                dateEvents: dateEvents
              };
            });
            return CreateElement({
              componentClass: SpotCard,
              props: {
                key: spot.name,
                name: spot.name,
                image: spot.images[0],
                description: spot.description,
                discplines: disciplinesForSpot,
                distance: spot.distance,
                onClick: function onClick() {
                  return _this5.selectSpot(spot);
                }
              }
            });
          })))
        });
        var noResultsMessage = filteredSpots.length === 0 ? CreateElement({
          tagName: "div",
          props: {
            textContent: "Aucun résultat trouvé.",
            className: "no-results-message"
          }
        }) : null;
        var spotsList = loading ? CreateElement({
          componentClass: Spinner
        }) : filteredSpots.length > 0 ? renderSpots : noResultsMessage;
        var filtersAndSpots = CreateElement({
          tagName: "div",
          props: {
            className: "filters-and-spots"
          },
          children: [filterSection, spotsList]
        });
        var mapSection = CreateElement({
          tagName: "div",
          props: {
            className: "map-container"
          },
          children: [CreateElement({
            componentClass: MapContainer,
            props: {
              id: "mapId",
              locations: filteredLocations,
              userLocation: userLocation
            }
          })]
        });
        return CreateElement({
          tagName: "div",
          props: {
            className: "explorer-events"
          },
          children: [filtersAndSpots, mapSection, modal]
        });
      }
    }]);
    return ExplorerEvent;
  }(Component);

  var Carte = /*#__PURE__*/function (_Component) {
    _inherits(Carte, _Component);
    var _super = _createSuper(Carte);
    function Carte() {
      _classCallCheck(this, Carte);
      return _super.apply(this, arguments);
    }
    _createClass(Carte, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'carte'
          },
          children: [CreateElement({
            componentClass: Navbar
          }), CreateElement({
            componentClass: ExplorerEvent
          }), CreateElement({
            componentClass: Footer
          })]
        });
      }
    }]);
    return Carte;
  }(Component);

  var CarrouselImage = /*#__PURE__*/function (_Component) {
    _inherits(CarrouselImage, _Component);
    var _super = _createSuper(CarrouselImage);
    function CarrouselImage(props) {
      var _this;
      _classCallCheck(this, CarrouselImage);
      _this = _super.call(this, props);
      _this.state = {
        currentImageIndex: 0
      };
      _this.nextImage = _this.nextImage.bind(_assertThisInitialized(_this));
      _this.previousImage = _this.previousImage.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(CarrouselImage, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.interval = setInterval(this.nextImage, 3000);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearInterval(this.interval);
      }
    }, {
      key: "nextImage",
      value: function nextImage() {
        var _this2 = this;
        this.setState(function (prevState) {
          return {
            currentImageIndex: (prevState.currentImageIndex + 1) % _this2.props.images.length
          };
        });
      }
    }, {
      key: "previousImage",
      value: function previousImage() {
        var _this3 = this;
        this.setState(function (prevState) {
          return {
            currentImageIndex: (prevState.currentImageIndex - 1 + _this3.props.images.length) % _this3.props.images.length
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var images = this.props.images;
        var currentImageIndex = this.state.currentImageIndex;
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'carousel'
          },
          children: [CreateElement({
            tagName: 'button',
            props: {
              textContent: '<',
              className: 'carousel-control prev',
              onClick: this.previousImage
            }
          }), CreateElement({
            tagName: 'img',
            props: {
              src: images[currentImageIndex],
              alt: "Image ".concat(currentImageIndex),
              className: "carousel-image ".concat(currentImageIndex === this.state.currentImageIndex ? 'active' : '')
            }
          }), CreateElement({
            tagName: 'button',
            props: {
              textContent: '>',
              className: 'carousel-control next',
              onClick: this.nextImage
            }
          })]
        });
      }
    }]);
    return CarrouselImage;
  }(Component);

  var DisciplineFilter = /*#__PURE__*/function (_MiniReact$Component) {
    _inherits(DisciplineFilter, _MiniReact$Component);
    var _super = _createSuper(DisciplineFilter);
    function DisciplineFilter(props) {
      var _this;
      _classCallCheck(this, DisciplineFilter);
      _this = _super.call(this, props);
      _this.state = {
        selectedDiscipline: ''
      };
      _this.handleDisciplineChange = _this.handleDisciplineChange.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(DisciplineFilter, [{
      key: "handleDisciplineChange",
      value: function handleDisciplineChange(event) {
        var selectedDiscipline = event.target.value;
        this.setState({
          selectedDiscipline: selectedDiscipline
        });
        if (this.props.onDisciplineChange) {
          this.props.onDisciplineChange(selectedDiscipline);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var optionsWithPlaceholder = [{
          value: '',
          label: 'Choisissez une discipline'
        }].concat(_toConsumableArray(this.props.options));
        return MiniReact.CreateElement({
          componentClass: Select,
          props: {
            options: optionsWithPlaceholder,
            onInput: this.handleDisciplineChange,
            value: this.state.selectedDiscipline,
            className: 'select-filter'
          }
        });
      }
    }]);
    return DisciplineFilter;
  }(MiniReact.Component);

  var FiltersEvents = /*#__PURE__*/function (_Component) {
    _inherits(FiltersEvents, _Component);
    var _super = _createSuper(FiltersEvents);
    function FiltersEvents(props) {
      var _this;
      _classCallCheck(this, FiltersEvents);
      _this = _super.call(this, props);
      _this.state = {
        searchTerm: "",
        selectedDate: "",
        selectedDiscipline: ""
      };
      _this.handleSearchChange = _this.handleSearchChange.bind(_assertThisInitialized(_this));
      _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_this));
      _this.handleDisciplineChange = _this.handleDisciplineChange.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(FiltersEvents, [{
      key: "handleSearchChange",
      value: function handleSearchChange(value) {
        this.setState(function () {
          return {
            searchTerm: value
          };
        });
        if (this.props.onSearchChange) {
          this.props.onSearchChange(value);
        }
      }
    }, {
      key: "handleDateChange",
      value: function handleDateChange(value) {
        this.setState(function () {
          return {
            selectedDate: value
          };
        });
        if (this.props.onDateChange) {
          this.props.onDateChange(value);
        }
      }
    }, {
      key: "handleDisciplineChange",
      value: function handleDisciplineChange(value) {
        this.setState(function () {
          return {
            selectedDiscipline: value
          };
        });
        if (this.props.onDisciplineChange) {
          this.props.onDisciplineChange(value);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: "div",
          props: {
            className: "filters"
          },
          children: [CreateElement({
            tagName: "div",
            props: {
              className: "search-bar-container"
            },
            children: [CreateElement({
              componentClass: SearchBar,
              props: {
                onSearchChange: this.handleSearchChange,
                showButton: false
              }
            })]
          }), CreateElement({
            tagName: "div",
            props: {
              className: "other-filters"
            },
            children: [CreateElement({
              componentClass: DatePicker,
              props: {
                onDateChange: this.handleDateChange
              }
            }), CreateElement({
              componentClass: DisciplineFilter,
              props: {
                options: this.props.disciplineOptions,
                onDisciplineChange: this.handleDisciplineChange
              }
            })]
          })]
        });
      }
    }]);
    return FiltersEvents;
  }(Component);

  var ListEvents = /*#__PURE__*/function (_Component) {
    _inherits(ListEvents, _Component);
    var _super = _createSuper(ListEvents);
    function ListEvents(props) {
      _classCallCheck(this, ListEvents);
      return _super.call(this, props);
    }
    _createClass(ListEvents, [{
      key: "renderEventItem",
      value: function renderEventItem(event, disciplineName, locationName, distance) {
        var dateFormatted = new Date(event.date).toLocaleDateString("fr-FR", {
          weekday: "long",
          day: "numeric",
          month: "long"
        });
        var distanceDisplay = distance !== null ? "".concat(distance.toFixed(1), " km") : 'Distance non disponible';
        var sessionElements = event.sessions.map(function (session) {
          return CreateElement({
            tagName: "div",
            props: {
              className: "session-container"
            },
            children: [CreateElement({
              tagName: "div",
              props: {
                className: "session-time-location"
              },
              children: [CreateElement({
                tagName: "span",
                props: {
                  textContent: "".concat(session.startTime, " - ").concat(session.endTime),
                  className: "session-time"
                }
              }), CreateElement({
                tagName: "div",
                props: {
                  className: "location-info"
                },
                children: [CreateElement({
                  tagName: "img",
                  props: {
                    src: "./images/components/distance1.svg",
                    alt: "Location",
                    className: "location-icon"
                  }
                }), CreateElement({
                  tagName: "span",
                  props: {
                    textContent: "".concat(locationName, " - ").concat(distanceDisplay),
                    className: "location-text"
                  }
                })]
              })]
            }), CreateElement({
              tagName: "div",
              props: {
                className: "activities-container"
              },
              children: session.activities.map(function (activity) {
                return CreateElement({
                  tagName: "span",
                  props: {
                    textContent: activity,
                    className: "activity-info"
                  }
                });
              })
            })]
          });
        });
        return CreateElement({
          tagName: "div",
          props: {
            className: "event-item"
          },
          children: [CreateElement({
            tagName: "h3",
            props: {
              textContent: disciplineName,
              className: "event-title"
            }
          }), CreateElement({
            tagName: "div",
            props: {
              className: "event-date"
            },
            children: [CreateElement({
              tagName: "span",
              props: {
                textContent: dateFormatted,
                className: "event-date-info"
              }
            })]
          })].concat(_toConsumableArray(sessionElements))
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;
        var _this$props = this.props,
          locations = _this$props.locations,
          userLocation = _this$props.userLocation;
        var eventsList = locations.flatMap(function (location) {
          var distance = userLocation ? calculateDistance(location.location, userLocation) / 1000 : null;
          return location.disciplines.flatMap(function (discipline) {
            return discipline.events.map(function (event) {
              return _this.renderEventItem(event, discipline.name, location.name, distance);
            });
          });
        });
        return CreateElement({
          tagName: "div",
          props: {
            className: "events-list"
          },
          children: eventsList
        });
      }
    }]);
    return ListEvents;
  }(Component);

  var ListingEvents = /*#__PURE__*/function (_Component) {
    _inherits(ListingEvents, _Component);
    var _super = _createSuper(ListingEvents);
    function ListingEvents(props) {
      var _this;
      _classCallCheck(this, ListingEvents);
      _this = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this), "handleSearchChange", function (searchTerm) {
        _this.applyFilters(searchTerm, _this.state.selectedDate, _this.state.selectedDiscipline);
      });
      _defineProperty(_assertThisInitialized(_this), "handleDateChange", function (selectedDate) {
        _this.applyFilters(_this.state.searchTerm, selectedDate, _this.state.selectedDiscipline);
      });
      _defineProperty(_assertThisInitialized(_this), "handleDisciplineChange", function (selectedDiscipline) {
        _this.applyFilters(_this.state.searchTerm, _this.state.selectedDate, selectedDiscipline);
      });
      _this.state = {
        locations: [],
        filteredLocations: [],
        searchTerm: '',
        selectedDate: '',
        selectedDiscipline: '',
        userLocation: null,
        loading: true
      };
      return _this;
    }
    _createClass(ListingEvents, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var data;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return fetchData("/data/dataJo.json");
              case 3:
                data = _context.sent;
                this.setState(function () {
                  return {
                    locations: data.locations,
                    filteredLocations: data.locations,
                    loading: false
                  };
                });
                this.initializeGeoLocation();
                _context.next = 12;
                break;
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                console.error("Erreur lors du chargement des données:", _context.t0);
                this.setState(function () {
                  return {
                    loading: false
                  };
                });
              case 12:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[0, 8]]);
        }));
        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }
        return componentDidMount;
      }()
    }, {
      key: "initializeGeoLocation",
      value: function initializeGeoLocation() {
        var _this2 = this;
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            _this2.setState(function () {
              return {
                userLocation: {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude
                }
              };
            });
          }, function (error) {
            console.error("Erreur lors de l'obtention de la géolocalisation :", error);
          });
        } else {
          console.error("La géolocalisation n'est pas prise en charge par ce navigateur.");
        }
      }
    }, {
      key: "applyFilters",
      value: function applyFilters(searchTerm, selectedDate, selectedDiscipline) {
        var filtered = this.state.locations.filter(function (location) {
          return location.disciplines.some(function (discipline) {
            return (selectedDiscipline ? discipline.name === selectedDiscipline : true) && (searchTerm ? discipline.name.toLowerCase().includes(searchTerm.toLowerCase()) : true) && discipline.events.some(function (event) {
              return (selectedDate ? event.date === selectedDate : true) && event.sessions.some(function (session) {
                return session.activities.some(function (activity) {
                  return searchTerm ? activity.toLowerCase().includes(searchTerm.toLowerCase()) : true;
                });
              });
            });
          });
        });
        this.setState(function () {
          return {
            filteredLocations: filtered,
            searchTerm: searchTerm,
            selectedDate: selectedDate,
            selectedDiscipline: selectedDiscipline
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
          filteredLocations = _this$state.filteredLocations,
          loading = _this$state.loading,
          userLocation = _this$state.userLocation;
        var carouselImages = ["./images/sports/img1.jpg", "./images/sports/img2.jpg", "./images/sports/img3.jpg", "./images/sports/img5.jpg"];
        var disciplineOptions = this.state.locations.flatMap(function (location) {
          return location.disciplines;
        }).map(function (discipline) {
          return {
            label: discipline.name,
            value: discipline.name
          };
        }).reduce(function (unique, option) {
          if (!unique.some(function (obj) {
            return obj.value === option.value;
          })) {
            unique.push(option);
          }
          return unique;
        }, []);
        return CreateElement({
          tagName: 'div',
          props: {
            className: 'listing-evenements'
          },
          children: [CreateElement({
            tagName: 'div',
            props: {
              className: 'carousel-container'
            },
            children: [CreateElement({
              componentClass: CarrouselImage,
              props: {
                images: carouselImages
              }
            })]
          }), CreateElement({
            tagName: 'div',
            props: {
              className: 'filters-and-list-container'
            },
            children: [CreateElement({
              tagName: 'div',
              props: {
                className: 'filters-container'
              },
              children: [CreateElement({
                componentClass: FiltersEvents,
                props: {
                  onSearchChange: this.handleSearchChange,
                  onDateChange: this.handleDateChange,
                  onDisciplineChange: this.handleDisciplineChange,
                  disciplineOptions: disciplineOptions
                }
              })]
            }), loading ? CreateElement({
              componentClass: Spinner
            }) : CreateElement({
              tagName: 'div',
              props: {
                className: 'events-container'
              },
              children: [CreateElement({
                componentClass: ListEvents,
                props: {
                  locations: filteredLocations,
                  userLocation: userLocation
                }
              })]
            })]
          })]
        });
      }
    }]);
    return ListingEvents;
  }(Component);

  var Evenements = /*#__PURE__*/function (_Component) {
    _inherits(Evenements, _Component);
    var _super = _createSuper(Evenements);
    function Evenements() {
      _classCallCheck(this, Evenements);
      return _super.apply(this, arguments);
    }
    _createClass(Evenements, [{
      key: "render",
      value: function render() {
        return CreateElement({
          tagName: 'div',
          children: [CreateElement({
            componentClass: Navbar
          }), CreateElement({
            componentClass: ListingEvents
          }), CreateElement({
            componentClass: Footer
          })]
        });
      }
    }]);
    return Evenements;
  }(Component);

  var routes = [new Route("/", Home), new Route("/not-found", NotFound), new Route("/carte", Carte), new Route("/evenements", Evenements)];

  var App = CreateElement({
    componentClass: BrowserRouter,
    props: {
      routes: routes
    }
  });
  MiniReactDOM.render(App, document.getElementById('root'));

})();
